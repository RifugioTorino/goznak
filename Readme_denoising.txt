Denoising.
Для решения задачи используется модель из файла model_unet.py.
В качестве входных данных модели используются зашумленные файлы, разбитые на блоки длиной 128 элементов спектрограммы.
На выходе модели ожидаются векторы шума:
 - при обучении их целевые значения получаются как разность между зашумленными и чистыми данными,
 - при использовании сети, очищенные аудиозаписи получаются как разность между входящими зашумленными записями и шумом, полученным на выходе сети.

Обучение модели:
Для обучения используется скрипт script_for_learning из den_learning.py.

script_for_learning(path = 'E:\\data\\test\\noise',
                        save_weights_to_file='den_full.h5',
                        epochs=30,
                        limit=None)

Его параметры:
    path - Путь, по которому лежит набор спектрограмм для обучения и валидации
    save_weights_to_file - Полное имя файла, в который надо сохранить веса модели
    epochs - Количество эпох для обучения
    limit - Параметр для ограничения количества спикеров,
            записи от которых попадают в обучающую выборку

В результате обучения получен файл весов 'den_full.h5'.


Использование модели:
Для убирания шума из одного файла используется метод denoising_one класса D из den_running.py:
D().denoising_one(dirty_path)

Его параметр:
    dirty_path - Имя файла с аудиозаписью

Для убирания шума из всех файлов фолдера с зашумленными данными - используется метод denoising_several класса D:
D().denoising_several(dirty_folder)

Его параметр:
    dirty_folder - Имя директории с зашумленными данными.
